{"version":3,"sources":["todoform.js","todo.js","App.js","reportWebVitals.js","index.js"],"names":["ToDoForm","addTask","useState","userInput","setUserInput","handleSubmit","e","preventDefault","onSubmit","value","type","onChange","currentTarget","onKeyDown","key","placeholder","ToDo","editTask","todo","toggleTask","removeTask","editMode","setEditMode","className","complete","onClick","id","task","onBlur","autoFocus","App","todos","setTodos","filter","handleToggle","map","length","newItem","Math","random","toString","substr","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAkCeA,MAhCf,YAA8B,IAAXC,EAAU,EAAVA,QAEf,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEMC,EAAe,SAACC,GAClBA,EAAEC,iBACFN,EAAQE,GACRC,EAAa,KAWjB,OACI,uBAAMI,SAAUH,EAAhB,UACI,uBACII,MAAON,EACPO,KAAK,OACLC,SAdS,SAACL,GAClBF,EAAaE,EAAEM,cAAcH,QAcrBI,UAZW,SAACP,GACN,UAAVA,EAAEQ,KACFT,EAAaC,IAWTS,YAAa,mGAEjB,gGCmBGC,EA9CF,SAAC,GAA8C,IAA7CC,EAA4C,EAA5CA,SAAUC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,WAEvC,EAA8BlB,oBAAS,GAAvC,mBAAKmB,EAAL,KAAeC,EAAf,KAEA,EAAgCpB,mBAAS,IAAzC,mBAAKC,EAAL,KAAgBC,EAAhB,KAiBA,OACI,iCACMiB,GACF,sBAAmBE,UAAU,YAA7B,UACI,qBAAKA,UAAWL,EAAKM,SAAW,mBAAqB,YAAaC,QAAS,kBAAMN,EAAWD,EAAKQ,KAAjG,SACKR,EAAKS,OAEV,qBAAKJ,UAAU,cAAcE,QAAS,kBAAML,EAAWF,EAAKQ,KAA5D,eAGA,qBAAKH,UAAU,mBAAmBE,QAxBrB,WACrBH,GAAY,IAuBJ,oBAPMJ,EAAKQ,IAYdL,GACD,qBAAKE,UAAU,yBAAf,SACI,uBAAOZ,SArBE,SAACL,GAClBF,EAAaE,EAAEM,cAAcH,QAoBUmB,OA3BhB,WACvBN,GAAY,GACZL,EAASd,EAAWe,EAAKQ,IACzBtB,EAAaD,IAwBsD0B,WAAW,EAAMpB,MAAON,EAC5EuB,GAAIR,EAAKQ,GAAIX,YAAa,yGCmBlCe,MAtDf,WACI,MAA0B5B,mBAAS,IAAnC,mBAAO6B,EAAP,KAAcC,EAAd,KAYMZ,EAAa,SAACM,GAChBM,EAAS,YAAID,EAAME,QAAO,SAACf,GAAD,OAAUA,EAAKQ,KAAOA,QAI9CQ,EAAe,SAACR,GAClBM,EAAS,YAAID,EAAMI,KAAI,SAACjB,GAAD,OACnBA,EAAKQ,KAAOA,EAAZ,2BAAqBR,GAArB,IAA2BM,UAAWN,EAAKM,WAA3C,eAA2DN,SAI7DD,EAAW,SAACd,EAAWuB,GACrBvB,GACA6B,EAAS,YAAID,EAAMI,KAAI,SAACjB,GAAD,OACnBA,EAAKQ,KAAOA,EAAZ,2BAAqBR,GAArB,IAA2BS,KAAMxB,IAAjC,eAAkDe,SAK9D,OACI,sBAAKK,UAAU,MAAf,UACI,iCACI,uGAAmBQ,EAAMK,YAE7B,cAAC,EAAD,CAAUnC,QAlCF,SAACE,GACb,GAAIA,EAAW,CACX,IAAMkC,EAAU,CACZX,GAAIY,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAG,GACzCd,KAAMxB,EACNqB,UAAU,GAEdQ,EAAS,GAAD,mBAAKD,GAAL,CAAYM,SA4BnBN,EAAMI,KAAI,SAACjB,GACR,OACI,cAAC,EAAD,CACIA,KAAMA,EAENC,WAAYe,EACZd,WAAYA,EACZH,SAAUA,GAHLC,EAAKQ,WCpCnBgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0fd1e11f.chunk.js","sourcesContent":["import {useState} from \"react\";\r\n\r\nfunction ToDoForm({addTask}) {\r\n\r\n    const [userInput, setUserInput] = useState('')\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        addTask(userInput)\r\n        setUserInput(\"\")\r\n    }\r\n    const handleChange = (e) => {\r\n        setUserInput(e.currentTarget.value)\r\n    }\r\n    const handleKeyPress = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            handleSubmit(e)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                value={userInput}\r\n                type=\"text\"\r\n                onChange={handleChange}\r\n                onKeyDown={handleKeyPress}\r\n                placeholder={\"Введите значение...\"}\r\n            />\r\n            <button>Сохранить</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default ToDoForm;","import {useState} from \"react\";\r\n\r\nconst ToDo = ({editTask, todo, toggleTask, removeTask}) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    let [userInput, setUserInput] = useState('');\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        editTask(userInput, todo.id)\r\n        setUserInput(userInput)\r\n    }\r\n\r\n    const OnTaskChange = (e) => {\r\n        setUserInput(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div key={todo.id} className=\"item-todo\">\r\n                <div className={todo.complete ? \"item-text strike\" : \"item-text\"} onClick={() => toggleTask(todo.id)}>\r\n                    {todo.task}\r\n                </div>\r\n                <div className=\"item-delete\" onClick={() => removeTask(todo.id)}>\r\n                    X\r\n                </div>\r\n                <div className=\"item-delete edit\" onClick={activateEditMode}>\r\n                    EDIT\r\n                </div>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div className=\"item-delete edit-task \" >\r\n                <input onChange={OnTaskChange} onBlur={deactivateEditMode} autoFocus={true} value={userInput}\r\n                       id={todo.id} placeholder={'Введите значение...'}/>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDo;","import './App.css';\nimport {useState} from \"react\";\nimport ToDoForm from \"./todoform\";\nimport ToDo from \"./todo\";\n\n\nfunction App() {\n    const [todos, setTodos] = useState([])\n\n    const addTask = (userInput) => {\n        if (userInput) {\n            const newItem = {\n                id: Math.random().toString(36).substr(2, 9),\n                task: userInput,\n                complete: false\n            }\n            setTodos([...todos, newItem])\n        }\n    }\n    const removeTask = (id) => {\n        setTodos([...todos.filter((todo) => todo.id !== id)])\n    }\n\n\n    const handleToggle = (id) => {\n        setTodos([...todos.map((todo) =>\n            todo.id === id ? {...todo, complete: !todo.complete} : {...todo}\n        )])\n    }\n\n    const editTask = (userInput, id) => {\n        if (userInput) {\n            setTodos([...todos.map((todo) =>\n                todo.id === id ? {...todo, task: userInput} : {...todo}\n            )])\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <header>\n                <h1>Список задач: {todos.length}</h1>\n            </header>\n            <ToDoForm addTask={addTask}/>\n            {todos.map((todo) => {\n                return (\n                    <ToDo\n                        todo={todo}\n                        key={todo.id}\n                        toggleTask={handleToggle}\n                        removeTask={removeTask}\n                        editTask={editTask}\n\n                    />\n                )\n            })}\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}